(defpackage :fun
  (:use :cl))

(in-package :fun)

(declaim (optimize (speed 3)(space 0)(safety 0)(debug 0)(compilation-speed 0)))

#|

down
up
left
right

|#

(defparameter *example*
  '(
(R 6 (0x70c710))
(D 5 (0x0dc571))
(L 2 (0x5713f0))
(D 2 (0xd2c081))
(R 2 (0x59c680))
(D 2 (0x411b91))
(L 5 (0x8ceee2))
(U 2 (0xcaa173))
(L 1 (0x1b58a2))
(U 2 (0xcaa171))
(R 2 (0x7807d2))
(U 3 (0xa77fa3))
(L 2 (0x015232))
(U 2 (0x7a21e3))
    ))


(defparameter *input*
  '(
(L 4 (0x6c74e0))
(D 4 (0x1afab1))
(L 4 (0x0b54a0))
(D 18 (0x3533c1))
(L 3 (0x411270))
(U 14 (0x121ed3))
(L 4 (0x17e0f0))
(U 10 (0x113841))
(L 8 (0x4fa040))
(U 13 (0x113843))
(L 3 (0x1b7fb0))
(U 7 (0x121ed1))
(L 10 (0x005ed0))
(D 4 (0x502e73))
(L 5 (0x47ebf0))
(D 10 (0x2d9421))
(R 7 (0x2d4360))
(D 8 (0x2d9423))
(L 7 (0x2164d0))
(D 8 (0x530f03))
(L 9 (0x14d330))
(D 14 (0x1c6c43))
(L 8 (0x5133e0))
(U 13 (0x2ec813))
(L 7 (0x2c56a0))
(U 6 (0x2b50c3))
(L 14 (0x465990))
(U 3 (0x5c9e03))
(L 6 (0x052cf0))
(U 7 (0x09d973))
(L 10 (0x3500b0))
(D 11 (0x088d63))
(L 11 (0x473f60))
(U 11 (0x405733))
(L 5 (0x414100))
(U 5 (0x10b5b3))
(L 9 (0x624920))
(U 8 (0x10b5b1))
(L 10 (0x02a810))
(U 7 (0x29a8c1))
(L 14 (0x6896c2))
(U 7 (0x4a0001))
(L 6 (0x07ef12))
(U 4 (0x399321))
(L 7 (0x2054f0))
(U 8 (0x226a41))
(R 8 (0x5030e0))
(U 6 (0x57a921))
(R 3 (0x3f7160))
(U 11 (0x4df573))
(R 6 (0x49fe20))
(U 13 (0x1c3d03))
(R 9 (0x4f4362))
(U 3 (0x0ba303))
(R 8 (0x75c3f2))
(U 13 (0x3e1493))
(R 12 (0x0af520))
(U 6 (0x3dc1b3))
(L 4 (0x0e7730))
(U 2 (0x36f991))
(L 8 (0x565800))
(D 5 (0x36f993))
(L 6 (0x554300))
(U 5 (0x35a393))
(L 8 (0x3ff8c0))
(U 7 (0x345003))
(R 11 (0x0140c0))
(U 5 (0x34d343))
(R 11 (0x0140c2))
(U 3 (0x3da6b3))
(R 2 (0x368952))
(U 8 (0x6c3473))
(R 5 (0x132af2))
(U 5 (0x47ae31))
(R 11 (0x479542))
(D 5 (0x34c7d1))
(R 3 (0x096fc2))
(D 4 (0x00bec1))
(R 9 (0x1f8712))
(D 10 (0x317681))
(R 3 (0x475352))
(D 2 (0x463703))
(R 12 (0x2e2f12))
(U 4 (0x260611))
(L 8 (0x2fa902))
(U 7 (0x260613))
(L 2 (0x5461a2))
(U 6 (0x463701))
(L 11 (0x3050d2))
(U 11 (0x508b33))
(L 11 (0x258512))
(U 14 (0x5e2013))
(L 4 (0x2b63a2))
(U 2 (0x6c3471))
(L 7 (0x297132))
(U 9 (0x0a6333))
(L 14 (0x4c7b92))
(U 4 (0x6f3b33))
(L 16 (0x4c7b90))
(U 6 (0x09f3c3))
(L 15 (0x053fa2))
(U 5 (0x4ad5c3))
(R 8 (0x1f96b0))
(U 7 (0x5c6d63))
(R 5 (0x0835f2))
(U 11 (0x4d5af3))
(R 6 (0x525352))
(U 8 (0x165b63))
(R 3 (0x5a8940))
(U 4 (0x099e83))
(L 3 (0x1f96b2))
(U 16 (0x1af253))
(L 6 (0x767070))
(U 4 (0x231d23))
(L 7 (0x02a910))
(U 9 (0x42f673))
(L 12 (0x0b64d0))
(U 3 (0x27b9c3))
(L 4 (0x21b400))
(U 10 (0x1744e3))
(L 12 (0x5a75e0))
(U 8 (0x42c5c3))
(L 12 (0x199ed2))
(U 13 (0x4cefc3))
(L 9 (0x245442))
(U 8 (0x119c61))
(R 10 (0x095c02))
(U 11 (0x68be41))
(R 6 (0x14ae52))
(D 9 (0x161161))
(R 4 (0x03bf22))
(D 6 (0x121833))
(L 4 (0x11a032))
(D 12 (0x1d8a53))
(R 8 (0x570a92))
(D 5 (0x4f2d23))
(R 9 (0x24dc02))
(U 6 (0x119c63))
(R 5 (0x230162))
(U 9 (0x1b8183))
(L 13 (0x19a6f2))
(U 10 (0x5dbb13))
(R 13 (0x200702))
(U 7 (0x5ee763))
(R 5 (0x059f22))
(D 3 (0x5ee761))
(R 10 (0x1a4342))
(D 8 (0x394c93))
(R 12 (0x0a6d32))
(U 8 (0x5756d1))
(R 8 (0x1ca732))
(D 10 (0x22af01))
(R 3 (0x424712))
(D 9 (0x53bcc3))
(R 9 (0x331712))
(D 10 (0x264913))
(R 4 (0x244212))
(D 7 (0x3f48b3))
(R 8 (0x54dec2))
(D 14 (0x515d83))
(R 4 (0x4d5930))
(D 8 (0x058093))
(R 5 (0x3738b0))
(D 3 (0x2b5173))
(R 9 (0x1f3660))
(D 16 (0x4c7f03))
(R 5 (0x6179a0))
(D 3 (0x548343))
(R 5 (0x4a2640))
(D 3 (0x106533))
(R 6 (0x1cfc70))
(U 4 (0x184de3))
(R 4 (0x234e70))
(U 9 (0x67b7f1))
(R 7 (0x2a16d0))
(U 7 (0x24fea1))
(R 9 (0x564262))
(D 4 (0x436f31))
(R 8 (0x564260))
(D 10 (0x24e101))
(R 12 (0x4df570))
(D 2 (0x152b43))
(R 9 (0x2bcb50))
(D 8 (0x5e2443))
(L 3 (0x444350))
(D 4 (0x13c883))
(L 16 (0x079a60))
(D 2 (0x2e75b3))
(L 2 (0x5ffa70))
(D 7 (0x3aede3))
(L 8 (0x0231f0))
(D 13 (0x0cc973))
(R 5 (0x3986f0))
(D 11 (0x0486a3))
(R 7 (0x34db30))
(D 8 (0x609e53))
(R 3 (0x44d400))
(D 8 (0x4c3ca1))
(L 15 (0x40a880))
(D 5 (0x18e851))
(R 5 (0x24f640))
(D 6 (0x0cc971))
(R 9 (0x03f810))
(D 8 (0x46d213))
(R 4 (0x2a68f0))
(D 18 (0x179ca3))
(R 3 (0x58afe0))
(U 18 (0x4cf4b3))
(R 2 (0x2ac350))
(U 2 (0x18ecd3))
(R 10 (0x0e0360))
(U 5 (0x2df743))
(R 11 (0x4e89a0))
(U 13 (0x4beca3))
(R 6 (0x5610e0))
(U 5 (0x155291))
(R 3 (0x6dbb30))
(U 5 (0x03dd31))
(R 3 (0x4dc0c0))
(U 12 (0x18d661))
(R 11 (0x36e652))
(U 10 (0x4fe7a1))
(R 5 (0x2f6e32))
(U 17 (0x2fe1d1))
(R 2 (0x2cba62))
(U 9 (0x2930a1))
(R 5 (0x286d12))
(U 7 (0x3ee381))
(R 12 (0x0c4ce0))
(U 4 (0x286181))
(L 17 (0x259a80))
(U 6 (0x5e3323))
(R 7 (0x4185c0))
(U 10 (0x5e3321))
(R 5 (0x2a9270))
(U 2 (0x11e811))
(R 12 (0x0edfe0))
(U 11 (0x053c71))
(R 11 (0x2abf90))
(U 7 (0x5f6381))
(R 7 (0x307120))
(U 3 (0x17a761))
(R 9 (0x180940))
(U 10 (0x0baa11))
(R 3 (0x5fe2f0))
(U 11 (0x0baa13))
(R 9 (0x69f120))
(U 5 (0x14bc71))
(R 7 (0x2fe940))
(U 16 (0x184891))
(L 7 (0x3e76b0))
(U 10 (0x74c8b1))
(L 13 (0x11fe70))
(U 9 (0x3712e1))
(R 6 (0x114d30))
(U 9 (0x26b653))
(R 11 (0x05c152))
(D 9 (0x151243))
(R 3 (0x400370))
(U 8 (0x6d4e13))
(R 17 (0x400372))
(D 6 (0x0ae363))
(L 4 (0x05c150))
(D 5 (0x17a753))
(R 7 (0x10cfc2))
(D 15 (0x470433))
(L 7 (0x10cfc0))
(D 6 (0x37c983))
(L 8 (0x19e760))
(D 6 (0x0ab8e3))
(R 12 (0x5e9970))
(D 5 (0x1ee3f1))
(R 6 (0x2b3962))
(U 11 (0x3a45b1))
(R 6 (0x3da2a0))
(U 6 (0x6e96f1))
(L 5 (0x3da2a2))
(U 8 (0x2e7501))
(R 11 (0x2b3960))
(U 10 (0x657f61))
(L 11 (0x291930))
(U 12 (0x04b591))
(R 5 (0x0c7c20))
(U 13 (0x043ff3))
(R 2 (0x14c0b0))
(U 11 (0x65d263))
(R 6 (0x060310))
(U 7 (0x499ce1))
(R 3 (0x511ff0))
(D 10 (0x207571))
(R 9 (0x2e4e30))
(D 5 (0x33a333))
(R 4 (0x6ce740))
(D 5 (0x449c93))
(R 3 (0x4540d0))
(U 9 (0x244651))
(R 3 (0x36cb70))
(U 3 (0x53f971))
(R 12 (0x122200))
(U 8 (0x454131))
(R 3 (0x0c83f2))
(D 7 (0x0b87c1))
(R 18 (0x361a72))
(D 7 (0x589d41))
(R 11 (0x31dab2))
(D 4 (0x589d43))
(R 5 (0x432802))
(D 7 (0x0b87c3))
(R 7 (0x101df2))
(D 18 (0x32fb11))
(R 5 (0x597e62))
(D 6 (0x271ec1))
(R 10 (0x19d672))
(D 3 (0x5fe541))
(R 12 (0x358d42))
(D 6 (0x258221))
(R 6 (0x192fd2))
(D 10 (0x048fa3))
(R 7 (0x3b17e2))
(D 9 (0x44d6b3))
(R 2 (0x456350))
(D 8 (0x15ae53))
(R 5 (0x456352))
(D 4 (0x4d7183))
(L 3 (0x173ee2))
(D 7 (0x2754e1))
(L 5 (0x1df992))
(D 13 (0x09dc01))
(L 7 (0x1db1f2))
(D 3 (0x6660e1))
(L 12 (0x04b802))
(D 2 (0x00c7f1))
(L 5 (0x03d8e2))
(D 8 (0x1f7303))
(L 9 (0x05d1e2))
(D 6 (0x1ded03))
(L 7 (0x2743f2))
(D 2 (0x1eebc1))
(L 4 (0x3c3272))
(D 10 (0x1eebc3))
(L 7 (0x15c632))
(D 13 (0x1ded01))
(R 7 (0x12ea32))
(D 4 (0x1f7301))
(L 6 (0x2b9562))
(D 6 (0x2ffb01))
(L 8 (0x5bf420))
(U 4 (0x422961))
(L 8 (0x69be80))
(U 9 (0x0a0141))
(L 5 (0x006c40))
(U 12 (0x1da551))
(L 2 (0x1db1f0))
(U 4 (0x0769d1))
(R 9 (0x1be912))
(U 4 (0x5fe191))
(R 6 (0x2aa3c2))
(U 16 (0x2283a1))
(L 6 (0x0d5b30))
(D 6 (0x37efc1))
(L 4 (0x5d2960))
(D 9 (0x06b111))
(L 12 (0x72b960))
(D 3 (0x1bb7f1))
(L 2 (0x34e3f0))
(D 12 (0x4ff8b1))
(L 10 (0x2dbbc0))
(D 3 (0x46ec21))
(L 7 (0x248220))
(U 11 (0x19bc11))
(R 11 (0x338e40))
(U 2 (0x24d9e1))
(R 3 (0x0e7330))
(U 10 (0x514f71))
(L 8 (0x3e49e0))
(U 6 (0x32c963))
(L 6 (0x344102))
(U 10 (0x27f3e3))
(L 14 (0x344100))
(D 11 (0x2b8c83))
(L 9 (0x1ed1b0))
(U 11 (0x400a01))
(L 5 (0x4a5de0))
(U 10 (0x3b32b1))
(L 5 (0x4a5de2))
(U 4 (0x0b0d11))
(L 11 (0x3d3140))
(U 5 (0x508151))
(L 5 (0x47d872))
(D 8 (0x132e71))
(L 12 (0x07e2f2))
(D 4 (0x40a3b1))
(L 4 (0x5e24b2))
(D 9 (0x181e91))
(R 16 (0x5e24b0))
(D 9 (0x3042d1))
(L 3 (0x07e2f0))
(D 11 (0x638e01))
(R 5 (0x3de122))
(D 8 (0x0f9b41))
(R 15 (0x452fc2))
(D 6 (0x57e8b1))
(R 7 (0x2a4e22))
(U 14 (0x00d391))
(R 5 (0x435852))
(D 10 (0x1e6f91))
(R 6 (0x6a77d2))
(D 7 (0x217553))
(L 6 (0x0db942))
(D 9 (0x36a663))
(L 7 (0x541100))
(D 11 (0x547883))
(R 6 (0x46c250))
(D 3 (0x1ab863))
(L 6 (0x0040e0))
(D 18 (0x28b1d3))
(R 6 (0x197e32))
(D 8 (0x3739c3))
(R 7 (0x540ee2))
(D 9 (0x572ac3))
(R 8 (0x2d8722))
(U 2 (0x0825b3))
(R 4 (0x1a1be2))
(U 13 (0x1ef4f1))
(R 3 (0x35b942))
(U 6 (0x00ae13))
(R 7 (0x307ab0))
(U 6 (0x6d52e3))
(R 5 (0x307ab2))
(U 11 (0x1aec73))
(R 6 (0x1801e2))
(D 9 (0x09f4f1))
(R 8 (0x0b72b2))
(D 4 (0x156b11))
(R 16 (0x3ea4e2))
(D 4 (0x2b86f1))
(R 8 (0x3ea4e0))
(D 10 (0x3b22e1))
(L 6 (0x0b72b0))
(D 9 (0x02e391))
(L 11 (0x3b40c2))
(D 4 (0x4b0d21))
(L 4 (0x436750))
(D 3 (0x0a2871))
(L 11 (0x459490))
(D 2 (0x448131))
(L 7 (0x4e46d2))
(D 6 (0x1239c1))
(L 2 (0x18be72))
(D 3 (0x01e451))
(L 2 (0x63d532))
(D 8 (0x088331))
(R 11 (0x13fbd2))
(D 2 (0x76bde1))
(R 9 (0x010bf2))
(D 7 (0x093ed1))
(R 11 (0x34efc2))
(D 9 (0x346ad1))
(R 15 (0x5ea842))
(D 8 (0x3f1461))
(R 8 (0x075292))
(D 5 (0x43d301))
(R 6 (0x5c8642))
(D 7 (0x515c51))
(R 6 (0x35e392))
(D 4 (0x515c53))
(L 11 (0x3c52e2))
(D 11 (0x460471))
(R 11 (0x55f562))
(D 4 (0x275f23))
(R 4 (0x6901b2))
(U 15 (0x058f43))
(R 5 (0x4cad42))
(U 8 (0x5ad323))
(R 6 (0x4180a2))
(U 3 (0x408241))
(R 14 (0x3c0f62))
(U 3 (0x055fa1))
(R 9 (0x3f6652))
(U 3 (0x7414f1))
(R 3 (0x11ae90))
(U 9 (0x098c31))
(L 13 (0x4a7ad0))
(U 6 (0x5dfb41))
(R 13 (0x1f4c50))
(U 8 (0x165861))
(R 3 (0x2d68c2))
(U 2 (0x715cb1))
(R 7 (0x2b7e62))
(D 6 (0x241511))
(R 9 (0x4e1152))
(D 8 (0x26ec71))
(R 5 (0x247332))
(D 14 (0x051611))
(L 9 (0x09f002))
(D 16 (0x366e31))
(L 3 (0x0d6b12))
(D 2 (0x6dc513))
(L 6 (0x1eccb2))
(D 7 (0x6d5ce3))
(R 8 (0x4a81b2))
(D 9 (0x02b891))
(L 8 (0x282492))
(D 5 (0x02b893))
(R 8 (0x1c9a22))
(D 13 (0x5a47b3))
(R 7 (0x4287e2))
(D 11 (0x0aecb3))
(R 3 (0x285d50))
(D 3 (0x2fba33))
(L 14 (0x1115b0))
(D 5 (0x42d373))
(L 5 (0x610760))
(U 11 (0x42d371))
(L 14 (0x13cda0))
(U 3 (0x2e73f3))
(L 11 (0x424cf0))
(U 9 (0x0e40e3))
(L 5 (0x2ca0f2))
(D 11 (0x6284d3))
(L 4 (0x4f7e52))
(D 12 (0x00d2d3))
(L 8 (0x0d1642))
(D 8 (0x1f9c23))
(L 6 (0x6648b2))
(D 9 (0x0101c1))
(L 9 (0x2cbc52))
(D 3 (0x094dc1))
(L 8 (0x35d1a2))
(D 2 (0x66e3d1))
(L 10 (0x20ab92))
(D 10 (0x168e31))
(L 8 (0x710542))
(U 12 (0x1e5051))
(L 8 (0x248cc2))
(U 3 (0x3fbc61))
(L 6 (0x64dc10))
(U 10 (0x2b81c1))
(L 11 (0x69f840))
(D 10 (0x4eae41))
(L 4 (0x5a3aa0))
(D 8 (0x2bbb71))
(L 13 (0x574fc2))
(D 3 (0x1d2801))
(L 3 (0x1fa5d2))
(D 12 (0x04b8f1))
(L 3 (0x136922))
(D 4 (0x4ec981))
(L 11 (0x042042))
(D 5 (0x319921))
(L 15 (0x5bd8c2))
(D 3 (0x216d11))
(L 3 (0x110372))
(U 7 (0x530633))
(L 2 (0x2db3d2))
(U 10 (0x3f8131))
(L 4 (0x047412))
(U 8 (0x1f5091))
(L 4 (0x07efb2))
(U 8 (0x02d151))
(L 4 (0x0503b2))
(U 4 (0x517631))
(L 12 (0x11df72))
(U 4 (0x273981))
(L 3 (0x5a6a72))
(D 4 (0x1ac7a1))
(L 8 (0x0aa4c2))
(D 4 (0x1d29c3))
(R 13 (0x5f2750))
(D 9 (0x592b53))
(L 13 (0x5f2752))
(D 8 (0x1ff393))
(L 7 (0x2b1a32))
(D 4 (0x20d203))
(L 18 (0x2724e2))
(D 4 (0x486343))
(R 19 (0x2ea0e2))
(D 2 (0x486341))
(R 14 (0x33e032))
(D 6 (0x1fb073))
(L 17 (0x2a4422))
(U 4 (0x4b9413))
(L 6 (0x1563d0))
(D 8 (0x065ed1))
(L 8 (0x317df0))
(U 8 (0x02fac3))
(L 12 (0x2f35c0))
(D 4 (0x02fac1))
(R 9 (0x5d1770))
(D 7 (0x065ed3))
(R 7 (0x16fa70))
(D 17 (0x35b073))
(R 7 (0x0c5930))
(D 5 (0x400163))
(L 9 (0x2a1ab2))
(D 11 (0x3bc7a3))
(L 14 (0x269eb2))
(D 9 (0x1ef343))
(L 10 (0x269eb0))
(U 4 (0x2d4f23))
(R 6 (0x38f922))
(U 9 (0x5a3f31))
(L 3 (0x1269d2))
(U 8 (0x2dcad1))
(L 7 (0x2296c2))
(U 9 (0x3b97a3))
(R 10 (0x24c7b2))
(U 3 (0x67d443))
(L 6 (0x39a682))
(U 8 (0x1c8c93))
(L 6 (0x75d832))
(U 3 (0x11b393))
(L 3 (0x441282))
(U 9 (0x4c45b3))
(L 11 (0x385732))
(U 11 (0x1c1a93))
(L 7 (0x31b132))
(U 8 (0x25ae53))
    ))


(defparameter *hash* nil)

(defparameter *x* 0)
(defparameter *y* 0)

(defparameter *lo-x* 0)
(defparameter *lo-y* 0)

(defparameter *hi-x* 0)
(defparameter *hi-y* 0)


(defun reset ()
  (setq *hash* (make-hash-table :test 'equalp))
  (setq *x* 0)
  (setq *y* 0)
  (setq *lo-x* 0)
  (setq *lo-y* 0)
  (setq *hi-x* 0)
  (setq *hi-y* 0)
  )

(defun assign (colour)
  (let ((pos (list *x* *y*)))
    (format t "assigning colour ~a => ~a ~%" colour pos)
    (setf (gethash pos *hash*) colour)
    (assert (eq (gethash pos *hash*) colour))
    t))


(defun left (colour)
  (incf *x* -1)
  (assign colour)  
  t)

(defun right (colour)
  (incf *x* 1)
  (assign colour)  
  t)

(defun down (colour)
  (incf *y* -1)
  (assign colour)  
  t)

(defun up (colour)
  (incf *y* 1)
  (assign colour)  
  t)

(defun status ()
  (format t "x,y ~a,~a : Lo x,y (~a,~a) -> Hi x y (~a,~a) ~%" *x* *y* *lo-x* *lo-y* *hi-x* *hi-y*))

;; (defmacro repeat (n expr)
;;   (let ((g (gensym n)))
;;     `(loop for ,g from 1 to ,n do
;; 	   ,expr)))

(defun repeat (n fexpr)
  (cond
    ((= n 0) t)
    (t (funcall fexpr)
       (repeat (- n 1) fexpr))))


#|
(loop for i from 1 to 6 do
  (format t "i = ~a ~%" i))
|#
;;(repeat 3 (lambda () (format t "three times ~%")))


(defun run (sequence)
  (reset)
  (dolist (cmd sequence)
      (let ((dir (first cmd))
	    (rep (second cmd))
	    (colour (first (third cmd))))
	(cond
	  ((eq dir 'L) (repeat rep (lambda () (left colour))))
	  ((eq dir 'R) (repeat rep (lambda () (right colour))))
	  ((eq dir 'U) (repeat rep (lambda () (up colour))))
	  ((eq dir 'D) (repeat rep (lambda () (down colour))))
	  (t (error "command direction not understood"))))
    
    (when (> *y* *hi-y*) (setq *hi-y* *y*))
    (when (< *y* *lo-y*) (setq *lo-y* *y*))  
    (when (< *x* *lo-x*) (setq *lo-x* *x*))
    (when (> *x* *hi-x*) (setq *hi-x* *x*))
    ))


;; poor mans visualiser of puzzle
(defun viz ()
  (loop for y from *hi-y* downto *lo-y* do
    (loop for x from *lo-x* to *hi-x* do
      (multiple-value-bind (val found) (gethash (list x y) *hash*)
	(cond
	  (found (format t "#" x y))
	  (t (format t "_" x y)))))
    (format t "~%"))
  (format t "~%"))




#|
 either #t yes it is inside ,
 or no nil it is not inside
|#
(defun hit (x y)
  (multiple-value-bind (val found) (gethash (list x y) *hash*)
    found))    

;; more complex than just looking vertically up or down , what about a cavern thats inside out
(defun is-inside (x y)
  t)
  ;; (catch 'found
  ;; ;; check up if we hit a # then yes otherwise not this one
  ;;   (loop for tx from *lo-x* to x do
      
  ;; ))




#|
pen scan from left to right
if pen is nil - ie off the paper when hits # - pen will be on
when pen hits another # pen gets lifted off paper
ie pen is a bool flipped whenever meet # 
|#
(defun fill-holes ()
    (loop for y from (+ 1 *hi-y*) downto (+ -1 *lo-y*) do
      (let ((pen nil))
      (loop for x from (- *lo-x* 1) to (+ *hi-x* 1) do
	(multiple-value-bind (val found) (gethash (list x y) *hash*)
	  (cond
	    (found 
		   (setq pen (not pen)))
	    (t
	     (when pen ;; fill
	       (setf (gethash (list x y) *hash*) #xffffff)
	       ))))))))



(defun count-holes ()
  (let ((total 0))
    (loop for y from (+ 1 *hi-y*) downto (+ -1 *lo-y*) do
      (loop for x from (+ -1 *lo-x*) to (+ 1 *hi-x*) do
	(multiple-value-bind (val found) (gethash (list x y) *hash*)
	  (cond
	    (found (incf total))))))
    total))


(defun demo (sequence)
  (reset)
  (run sequence)
  (format t "~%number of holes found ~a ~%" (count-holes))
  ;; (fill-holes)
  ;; (format t "~%number of holes found ~a ~%" (count-holes))
)

  
(defun dbug ()
  (reset)
  (run *input*)
  (let ((p (merge-pathnames "test")))
    (with-open-file (*standard-output* p :direction :output :if-exists :supersede)
      (viz))))


(defun dbug2 ()
  (reset)
  (run *input*)
  ;; recursively paint a certain square 
  (paint 174 69)
  (let ((p (merge-pathnames "test2")))
    (with-open-file (*standard-output* p :direction :output :if-exists :supersede)
      (viz))))





(defun check ()
  t)

;; actual paint point is coordinate (174 69)
;; --------- zero is not top left  , zero is -201 
;; 375 69 
;; 365 35
;; inside if not found - set it found
;; up left right down recursively until can no longer paint ?
;; when we meet a hit point , then we backtrack and start filling in missing pieces ?
(defun paint (x y)
  (when (and (and (< x *hi-x*) (> x *lo-x*))
	     (and (< y *hi-y*) (> y *lo-y*)))
  (multiple-value-bind (val found) (gethash (list x y) *hash*)
    (cond
      (found nil)
      (t
       (let ((colour #xffffff))
	 (setf (gethash (list x y) *hash*) colour)
	 (format t "painting ~a ~a => ~a ~%" x y #xffffff)
	 (paint (- x 1) y)
	 (paint (+ x 1) y)
	 (paint x (- y 1))
	 (paint x (+ y 1))
	 ))))))




;; (loop for y from 10 downto 1 do (format t " y = ~A ~%" y))
;; (run *example*) 
;; (run *input*)

#|

(dbug2)  ;; actually fills with recursive paint algorithm , flood fill

FUN> (count-holes)
92758

|#


