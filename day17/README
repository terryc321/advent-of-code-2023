
tried as best we can to weed out bad solutions

path id 9 recreated okay 
;; path 
 ((0 0 0) (1 0 3) (2 0 5) (3 0 9) (3 1 11) (4 1 14) (4 2 16) (5 2 18) (6 2 20) (7 2 22) (8 2 23) (8 3 25) (9 3 29) (10 3 30) (10 4 34) (11 4 37) (12 4 40) (13 4 41) (14 4 44) (15 4 47) (16 4 49) (16 5 52) (17 5 55) (18 5 56) (19 5 57) (20 5 61) (21 5 62) (21 6 67) (21 7 68) (22 7 70) (23 7 75) (24 7 77) (24 6 78) (25 6 82) (26 6 83) (27 6 88) (28 6 89) (29 6 90) (30 6 92) (31 6 93) (32 6 98) (32 5 100) (33 5 104) (34 5 107) (35 5 108) (36 5 110) (37 5 111) (37 4 114) (38 4 117) (39 4 118) (40 4 120) (40 3 122) (41 3 127) (42 3 129) (43 3 131) (43 2 136) (44 2 138) (45 2 143) (46 2 145) (46 1 146) (47 1 152) (48 1 157) (48 0 158) (49 0 159) (50 0 163) (51 0 165) (51 1 168) (51 2 170) (52 2 173) (53 2 175) (53 3 181) (54 3 184) (55 3 187) (56 3 190) (56 4 192) (57 4 194) (58 4 196) (58 5 200) (59 5 202) (59 4 205) (60 4 210) (61 4 213) (62 4 219) (63 4 221) (64 4 223) (64 3 226) (65 3 229) (66 3 231) (66 2 236) (67 2 239) (68 2 243) (69 2 245) (70 2 248) (70 3 250) (71 3 253) (72 3 257) (72 4 259) (73 4 262) (74 4 266) (75 4 268) (75 3 271) (76 3 273) (77 3 277) (78 3 279) (78 4 281) (79 4 285) (80 4 287) (81 4 293) (81 5 299) (82 5 302) (83 5 306) (84 5 309) (84 4 312) (85 4 315) (86 4 319) (87 4 323) (88 4 329) (89 4 332) (90 4 334) (91 4 337) (92 4 341) (92 3 344) (93 3 347) (94 3 351) (94 2 354) (95 2 358) (96 2 364) (97 2 366) (98 2 370) (98 1 371) (99 1 372) (100 1 375) (100 2 376) (101 2 378) (102 2 383) (103 2 384) (104 2 385) (105 2 386) (106 2 388) (106 1 390) (107 1 393) (108 1 394) (109 1 395) (109 2 397) (109 3 399) (110 3 401) (111 3 402) (111 4 403) (112 4 405) (113 4 407) (114 4 408) (115 4 409) (115 5 410) (115 6 415) (115 7 418) (116 7 419) (116 8 420) (116 9 423) (116 10 424) (117 10 426) (118 10 429) (118 11 430) (118 12 431) (118 13 433) (119 13 434) (119 14 436) (120 14 438) (121 14 439) (122 14 440) (122 15 443) (123 15 446) (124 15 448) (125 15 450) (125 16 452) (125 17 455) (125 18 457) (126 18 458) (126 19 459) (127 19 460) (127 20 461) (127 21 464) (127 22 467) (128 22 469) (128 23 472) (128 24 474) (129 24 477) (130 24 481) (131 24 483) (131 25 485) (131 26 487) (131 27 488) (132 27 493) (132 28 494) (133 28 495) (133 29 499) (133 30 501) (133 31 505) (134 31 507) (135 31 510) (136 31 511) (136 32 515) (136 33 517) (136 34 520) (137 34 522) (138 34 525) (138 35 528) (138 36 529) (139 36 531) (139 37 534) (139 38 537) (139 39 542) (138 39 544) (138 40 547) (138 41 549) (138 42 551) (137 42 554) (137 43 560) (137 44 562) (137 45 565) (136 45 568) (136 46 573) (136 47 576) (135 47 580) (135 48 582) (135 49 586) (135 50 590) (136 50 593) (136 51 595) (136 52 597) (136 53 599) (135 53 601) (135 54 605) (135 55 609) (135 56 611) (134 56 613) (134 57 616) (134 58 621) (134 59 623) (135 59 625) (135 60 628) (135 61 631) (135 62 635) (136 62 637) (136 63 639) (136 64 644) (136 65 648) (137 65 651) (137 66 654) (137 67 659) (136 67 661) (136 68 664) (136 69 666) (136 70 669) (135 70 674) (135 71 677) (135 72 680) (135 73 682) (134 73 685) (134 74 688) (133 74 690) (133 75 693) (133 76 695) (133 77 699) (132 77 703) (132 78 706) (132 79 709) (132 80 712) (131 80 715) (132 80 718) (132 81 724) (132 82 726) (132 83 728) (133 83 730) (133 84 733) (133 85 736) (133 86 739) (134 86 744) (135 86 746) (135 87 751) (135 88 754) (135 89 756) (136 89 759) (136 90 761) (136 91 763) (137 91 766) (137 92 769) (138 92 772) (138 93 776) (138 94 780) (138 95 782) (139 95 784) (139 96 787) (139 97 789) (139 98 794) (140 98 799) (140 99 800) (140 100 802) (140 101 805) (139 101 807) (139 102 808) (139 103 811) (140 103 813) (140 104 816) (140 105 821) (140 106 823) (139 106 824) (139 107 826) (139 108 827) (139 109 828) (138 109 830) (138 110 832) (137 110 834) (137 111 835) (137 112 838) (137 113 839) (138 113 843) (138 114 844) (138 115 846) (137 115 848) (137 116 850) (137 117 851) (137 118 855) (136 118 856) (136 119 858) (136 120 860) (136 121 863) (137 121 867) (137 122 868) (137 123 870) (137 124 871) (138 124 872) (138 125 876) (138 126 878) (138 127 880) (139 127 883) (139 128 887) (139 129 888) (139 130 889) (138 130 890) (138 131 891) (138 132 894) (139 132 895) (139 133 897) (139 134 898) (138 134 899) (138 135 901) (138 136 905) (138 137 908) (139 137 909) (139 138 912) (139 139 913) (139 140 914) (140 140 916)) 

;; english                            ************************** gone right 4 times 
 (right right right down right down*** right right right right ***down right right down right right right right right right down right right right right right down down right right right up right right right right right right right right up right right right right right up right right right up right right right up right right right up right right up right right right down down right right down right right right down right right down right up right right right right right up right right up right right right right down right right down right right right up right right right down right right right down right right right up right right right right right right right right up right right up right right right right up right right down right right right right right right up right right right down down right right down right right right right down down down right down down down right right down down down right down right right right down right right right down down down right down right down down down right down down right right right down down down right down right down down down right right right down down down right right down down right down down down left down down down left down down down left down down left down down down right down down down left down down down left down down down right down down down right down down down right down down left down down down left down down down left down left down down down left down down down left right down down down right down down down right right down down down right down down right down right down down down right down down down right down down down left down down right down down down left down down down left down left down down down right down down left down down down left down down down right down down down right down down down right down down down left down down right down down left down down down right down down down right) 

dont know whats going on , tried eliminating the answers , but it just comes up ,
same visually
same numerically checked on path x y visually
definitely going wrong
checks do not catch it at all



;; --------------------------


have a proposed solution - says 916 - appears there are several solutions
of 916 also

part A board is 141 x 141 width x height
find 916 in lower right corner xy 140 140 

  (916 right down down)
 from *score* 


---- accepted !!!



saved *score* scoreboard to rescue.scm

can we work backwards from 

#;5> (pp (vector-ref (vector-ref *score* 140) 140))
#(#f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  (928 right right right)
  #f
  (920 right right down)
  #f
  #f
  #f
  (918 right down left)
  (917 right down right)
  (916 right down down)
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  #f
  (917 down right right)
  (921 down right up)
  (916 down right down)
  #f
  (917 down down right)
  (916 down down down)
  #f)


;; ----------------------

breadth first search

gave each square 37 opportunities

915

can we reconstruct the solution ?




;; ----------------------

each square can only be entered by 4 ways

 1          2         3          4
from-top from-left from-right from-below

so at most size grid x 4 x [ cost dir1 dir2 dir3 ]

only going to pass through any one square once on optimal run




;; -----------------------
is it a breadth first problem ?

start top left 1,1
either go right to 2,1
or down to 1,2

2,1 has cost (xy 2 1)
1,2 has cost (xy 1 2)

never go over same square?

look at square and what information do i need to make a decision on

square 8 8 has following data :
 [ cost 5 moves left-left-up ]
 [ cost 123 moves right-up-right ]
 [ ... ]
 [ ... ]

0   2    3
3   4/3  ?
?   ?    ?



;; -----------------------
incremental improvement

x x
  x x
    x x
      x x
        x x   etc...

1 2 3 right , 1 2 3 up / down , 
;;------------------------

idea of jigsaws ?

since know if take three steps forward then need to turn 90 degrees

simplest pieces a single move 

a b

b
a

a
b

b a    backwards


      ?
x x x x
      ?

starting from top left

here is a piece 
x x x x
      x

here is another piece
      x
      x x x x

put these two pieces together

x x x x
      x
      x
      x x x x

but this has reduced number of procedure calls to 2 rather than 9 


x x x x     x x x x     x x x x     x x x x
      x x x x     x x x x     x x x x     x
                                          x
					x x
                                        x
					x
					x x
					  x
					  x
					x x
                                        x O


;;------------------------------------------
ordering selection of moves based on distance from top left then running first one
which is furthest , until finds a solution

(141 141) : score 1494 : best-so-far 1494 
(141 141) : score 1492 : best-so-far 1492 
(141 141) : score 1490 : best-so-far 1490 
(141 141) : score 1489 : best-so-far 1489 
(141 141) : score 1488 : best-so-far 1488 
(141 141) : score 1487 : best-so-far 1487 
(141 141) : score 1486 : best-so-far 1486 
(141 141) : score 1485 : best-so-far 1485 
(141 141) : score 1484 : best-so-far 1484 
(141 141) : score 1483 : best-so-far 1483 
(141 141) : score 1482 : best-so-far 1482 
(141 141) : score 1481 : best-so-far 1481 
(141 141) : score 1480 : best-so-far 1480 
(141 141) : score 1479 : best-so-far 1479 
(141 141) : score 1478 : best-so-far 1478 
(141 141) : score 1477 : best-so-far 1477 
(141 141) : score 1476 : best-so-far 1476   *** best so far ....

;;---------------------------------------------

solutions
./viz-big  # reads from solutions file and displays grpahics on screen
# seems very slow to update
# may be because reading one line at a time ?
# can we read entire file in one go ? -- cant be that big can it ? -- optimal size ??
# 
 



mkfifo data
cost-depth3.scm => cost-depth3
viz-big.scm => viz-big

cost-depth3 &
viz-big &

restrict cost to certain value - can finish the example 13 x 13 quite quickly
e.g (solve 105)
restricts max-cost to 105 and does not continue depth first search






maximum depth first search -
what is cut off - can we show this search path is futile as can never reach lower right corner
think knights-tour puzzle when it blocks off corner not accessible ,
when fix that , solutions knights tour fairly easily


grid x y
cost to each move
wish to minimize cost
start top left 1,1
goal reach bottom right width,height

example 13 x 13 
input 141 x 141

i/o problem - get numbers into some form of a 2d grid
hash table ?
array ?

2413432311323
3215453535623
3255245654254
3446585845452
4546657867536
1438598798454
4457876987766
3637877979653
4654967986887
4564679986453
1224686865563
2546548887735
4322674655533


#(
#(2 4 1 3 4 3 2 3 1 1 3 2 3)
#(3 2 1 5 4 5 3 5 3 5 6 2 3)
#(3 2 5 5 2 4 5 6 5 4 2 5 4)
#(3 4 4 6 5 8 5 8 4 5 4 5 2)
#(4 5 4 6 6 5 7 8 6 7 5 3 6)
#(1 4 3 8 5 9 8 7 9 8 4 5 4)
#(4 4 5 7 8 7 6 9 8 7 7 6 6)
#(3 6 3 7 8 7 7 9 7 9 6 5 3)
#(4 6 5 4 9 6 7 9 8 6 8 8 7)
#(4 5 6 4 6 7 9 9 8 6 4 5 3)
#(1 2 2 4 6 8 6 8 6 5 5 6 3)
#(2 5 4 6 5 4 8 8 8 7 7 3 5)
#(4 3 2 2 6 7 4 6 5 5 5 3 3)
)
