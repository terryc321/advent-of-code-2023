
;; -----------------------
incremental improvement

x x
  x x
    x x
      x x
        x x   etc...

1 2 3 right , 1 2 3 up / down , 
;;------------------------

idea of jigsaws ?

since know if take three steps forward then need to turn 90 degrees

simplest pieces a single move 

a b

b
a

a
b

b a    backwards


      ?
x x x x
      ?

starting from top left

here is a piece 
x x x x
      x

here is another piece
      x
      x x x x

put these two pieces together

x x x x
      x
      x
      x x x x

but this has reduced number of procedure calls to 2 rather than 9 


x x x x     x x x x     x x x x     x x x x
      x x x x     x x x x     x x x x     x
                                          x
					x x
                                        x
					x
					x x
					  x
					  x
					x x
                                        x O


;;------------------------------------------
ordering selection of moves based on distance from top left then running first one
which is furthest , until finds a solution

(141 141) : score 1494 : best-so-far 1494 
(141 141) : score 1492 : best-so-far 1492 
(141 141) : score 1490 : best-so-far 1490 
(141 141) : score 1489 : best-so-far 1489 
(141 141) : score 1488 : best-so-far 1488 
(141 141) : score 1487 : best-so-far 1487 
(141 141) : score 1486 : best-so-far 1486 
(141 141) : score 1485 : best-so-far 1485 
(141 141) : score 1484 : best-so-far 1484 
(141 141) : score 1483 : best-so-far 1483 
(141 141) : score 1482 : best-so-far 1482 
(141 141) : score 1481 : best-so-far 1481 
(141 141) : score 1480 : best-so-far 1480 
(141 141) : score 1479 : best-so-far 1479 
(141 141) : score 1478 : best-so-far 1478 
(141 141) : score 1477 : best-so-far 1477 
(141 141) : score 1476 : best-so-far 1476   *** best so far ....

;;---------------------------------------------

solutions
./viz-big  # reads from solutions file and displays grpahics on screen
# seems very slow to update
# may be because reading one line at a time ?
# can we read entire file in one go ? -- cant be that big can it ? -- optimal size ??
# 
 



mkfifo data
cost-depth3.scm => cost-depth3
viz-big.scm => viz-big

cost-depth3 &
viz-big &

restrict cost to certain value - can finish the example 13 x 13 quite quickly
e.g (solve 105)
restricts max-cost to 105 and does not continue depth first search






maximum depth first search -
what is cut off - can we show this search path is futile as can never reach lower right corner
think knights-tour puzzle when it blocks off corner not accessible ,
when fix that , solutions knights tour fairly easily


grid x y
cost to each move
wish to minimize cost
start top left 1,1
goal reach bottom right width,height

example 13 x 13 
input 141 x 141

i/o problem - get numbers into some form of a 2d grid
hash table ?
array ?

2413432311323
3215453535623
3255245654254
3446585845452
4546657867536
1438598798454
4457876987766
3637877979653
4654967986887
4564679986453
1224686865563
2546548887735
4322674655533


#(
#(2 4 1 3 4 3 2 3 1 1 3 2 3)
#(3 2 1 5 4 5 3 5 3 5 6 2 3)
#(3 2 5 5 2 4 5 6 5 4 2 5 4)
#(3 4 4 6 5 8 5 8 4 5 4 5 2)
#(4 5 4 6 6 5 7 8 6 7 5 3 6)
#(1 4 3 8 5 9 8 7 9 8 4 5 4)
#(4 4 5 7 8 7 6 9 8 7 7 6 6)
#(3 6 3 7 8 7 7 9 7 9 6 5 3)
#(4 6 5 4 9 6 7 9 8 6 8 8 7)
#(4 5 6 4 6 7 9 9 8 6 4 5 3)
#(1 2 2 4 6 8 6 8 6 5 5 6 3)
#(2 5 4 6 5 4 8 8 8 7 7 3 5)
#(4 3 2 2 6 7 4 6 5 5 5 3 3)
)
